@page "/quickGrid"
@using GridTest.Shared.Models;
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IHttpClientFactory ClientFactory;

<div class="content-container quickgrid-page">
    <p>
        <a href="/">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" />
            </svg>
        </a>
        <span>QuickGrid</span>
    </p>
    <div class="content quick-grid-content">
        <QuickGrid Items="@people" Class="quickgridTable" Pagination="@pagination">
            <PropertyColumn Title="ID" Property="@(p => p.Id.Name)" Sortable="true"/>
            <PropertyColumn Title="Name" Property="@(p => $"{p.Name.First} {p.Name.Last}")" Sortable="true" />
            <PropertyColumn Title="Email" Property="@(p => p.Email)" Sortable="true" />
            <PropertyColumn Title="Gender" Property="@(p => p.Gender == "femail" ? "F" : "M")" Sortable="true" />
            <PropertyColumn Title="Mobile" Property="@(p => p.Cell)" Sortable="true" />
            <PropertyColumn Title="National" Property="@(p => p.Nat)" Sortable="true" />
        </QuickGrid>
        <div class="pagination-wrapper">
            <div class="pagination-pagesize">
                <span>Items per page:</span>
                <select @bind="@pagination.ItemsPerPage">
                    @foreach(var i in new List<int>{ 10, 20, 30, 40, 50 })
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>
            <Paginator Value="@pagination" />
        </div>
    </div>
</div>

<div>
    <h3>Test</h3>
    @if(dataTest.Count > 0)
    {
        @for(var i=0;i<pagination.ItemsPerPage;i++)
        {
            Dictionary<string, object> data = dataTest[i];

            <span>{</span>
            @foreach (KeyValuePair<string, object> item in data)
            {
                <p>@item.Key <span>:</span> @item.Value</p>
            }
            <span>}</span>
        }
    }
</div>


@code {
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    List<Dictionary<string, object>> dataTest = new();
    IQueryable<Person>? people;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpClient httpClient = ClientFactory.CreateClient("public");
            var results = await httpClient.GetFromJsonAsync<DataModel>($"api/User/GetAllUsers");


            if(results != null)
            {
                people = results.Results.AsQueryable();

                dataTest = QuickUtils.ConvertingDataList(results.Results);
            }
        }
        catch(Exception e)
        {
            
        }
    }
}
